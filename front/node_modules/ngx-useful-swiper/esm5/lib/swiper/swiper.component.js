/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, Input } from '@angular/core';
import Swiper from 'swiper';
var SwiperComponent = /** @class */ (function () {
    function SwiperComponent(elementRef, changeDetectorRef) {
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.slideCount = 0;
        this.initialized = false;
        this.shouldInitialize = true;
    }
    Object.defineProperty(SwiperComponent.prototype, "initialize", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.shouldInitialize = this.initialized ? false : value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SwiperComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.shouldInitialize) {
            this.setup();
        }
    };
    /**
     * @return {?}
     */
    SwiperComponent.prototype.setup = /**
     * @return {?}
     */
    function () {
        if (!this.swiper) {
            // if rendered on server querySelector is undefined
            if (this.elementRef.nativeElement.querySelector) {
                this.swiperWrapper = this.elementRef.nativeElement.querySelector('.swiper-wrapper');
                this.slideCount = this.swiperWrapper.childElementCount;
                this.swiper = new Swiper(this.elementRef.nativeElement.querySelector('swiper > div'), this.config);
                this.changeDetectorRef.detectChanges();
            }
            this.shouldInitialize = false;
        }
    };
    /**
     * @return {?}
     */
    SwiperComponent.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        if (this.shouldInitialize) {
            this.setup();
        }
        if (this.swiperWrapper &&
            this.slideCount !== this.swiperWrapper.childElementCount) {
            this.slideCount = this.swiperWrapper.childElementCount;
            this.swiper.update();
        }
    };
    SwiperComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'swiper',
                    template: "<div\r\n  [ngClass]=\"{\r\n    'swiper-container': config?.containerModifierClass === undefined\r\n  }\"\r\n>\r\n  <ng-content></ng-content>\r\n</div>\r\n",
                    styles: [":host{display:block}.swiper-container{width:100%;height:100%}"]
                }] }
    ];
    /** @nocollapse */
    SwiperComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    SwiperComponent.propDecorators = {
        config: [{ type: Input }],
        initialize: [{ type: Input, args: ['initialize',] }]
    };
    return SwiperComponent;
}());
export { SwiperComponent };
if (false) {
    /** @type {?} */
    SwiperComponent.prototype.config;
    /** @type {?} */
    SwiperComponent.prototype.swiper;
    /**
     * @type {?}
     * @private
     */
    SwiperComponent.prototype.swiperWrapper;
    /**
     * @type {?}
     * @private
     */
    SwiperComponent.prototype.slideCount;
    /**
     * @type {?}
     * @private
     */
    SwiperComponent.prototype.initialized;
    /**
     * @type {?}
     * @private
     */
    SwiperComponent.prototype.shouldInitialize;
    /**
     * @type {?}
     * @private
     */
    SwiperComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    SwiperComponent.prototype.changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpcGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC11c2VmdWwtc3dpcGVyLyIsInNvdXJjZXMiOlsibGliL3N3aXBlci9zd2lwZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBR0wsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsS0FBSyxFQUNOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sTUFBeUIsTUFBTSxRQUFRLENBQUM7QUFFL0M7SUFvQkUseUJBQ1UsVUFBc0IsRUFDdEIsaUJBQW9DO1FBRHBDLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQU50QyxlQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsZ0JBQVcsR0FBRyxLQUFLLENBQUM7UUFDcEIscUJBQWdCLEdBQUcsSUFBSSxDQUFDO0lBSzdCLENBQUM7SUFkSixzQkFBeUIsdUNBQVU7Ozs7O1FBQW5DLFVBQW9DLEtBQWM7WUFDaEQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQzNELENBQUM7OztPQUFBOzs7O0lBY0QseUNBQWU7OztJQUFmO1FBQ0UsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDekIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2Q7SUFDSCxDQUFDOzs7O0lBRUQsK0JBQUs7OztJQUFMO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDaEIsbURBQW1EO1lBQ25ELElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsYUFBYSxFQUFFO2dCQUMvQyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FDOUQsaUJBQWlCLENBQ2xCLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDO2dCQUN2RCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksTUFBTSxDQUN0QixJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLEVBQzNELElBQUksQ0FBQyxNQUFNLENBQ1osQ0FBQztnQkFDRixJQUFJLENBQUMsaUJBQWlCLENBQUMsYUFBYSxFQUFFLENBQUM7YUFDeEM7WUFFRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO1NBQy9CO0lBQ0gsQ0FBQzs7OztJQUVELDRDQUFrQjs7O0lBQWxCO1FBQ0UsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDekIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2Q7UUFFRCxJQUNFLElBQUksQ0FBQyxhQUFhO1lBQ2xCLElBQUksQ0FBQyxVQUFVLEtBQUssSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsRUFDeEQ7WUFDQSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUM7WUFDdkQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUN0QjtJQUNILENBQUM7O2dCQTlERixTQUFTLFNBQUM7O29CQUVULFFBQVEsRUFBRSxRQUFRO29CQUNsQixzS0FBc0M7O2lCQUV2Qzs7OztnQkFWQyxVQUFVO2dCQUZWLGlCQUFpQjs7O3lCQWVoQixLQUFLOzZCQUNMLEtBQUssU0FBQyxZQUFZOztJQXNEckIsc0JBQUM7Q0FBQSxBQS9ERCxJQStEQztTQXpEWSxlQUFlOzs7SUFFMUIsaUNBQStCOztJQUsvQixpQ0FBWTs7Ozs7SUFFWix3Q0FBMkI7Ozs7O0lBQzNCLHFDQUF1Qjs7Ozs7SUFDdkIsc0NBQTRCOzs7OztJQUM1QiwyQ0FBZ0M7Ozs7O0lBRzlCLHFDQUE4Qjs7Ozs7SUFDOUIsNENBQTRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBBZnRlclZpZXdDaGVja2VkLFxyXG4gIEFmdGVyVmlld0luaXQsXHJcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgQ29tcG9uZW50LFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgSW5wdXRcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IFN3aXBlciwgeyBTd2lwZXJPcHRpb25zIH0gZnJvbSAnc3dpcGVyJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogY29tcG9uZW50LXNlbGVjdG9yXHJcbiAgc2VsZWN0b3I6ICdzd2lwZXInLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9zd2lwZXIuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL3N3aXBlci5jb21wb25lbnQuY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIFN3aXBlckNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0NoZWNrZWQsIEFmdGVyVmlld0luaXQge1xyXG4gIC8vIGFkZCBhbGwgdGhlIG9wdGlvbnMgYXMgb3B0aW9uYWwgc2V0dGluZ3MgYW5kIHVzZSB0aGVtIHRvIGNyZWF0ZSBhbiBvcHRpb25zIG9iamVjdFxyXG4gIEBJbnB1dCgpIGNvbmZpZzogU3dpcGVyT3B0aW9ucztcclxuICBASW5wdXQoJ2luaXRpYWxpemUnKSBzZXQgaW5pdGlhbGl6ZSh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgdGhpcy5zaG91bGRJbml0aWFsaXplID0gdGhpcy5pbml0aWFsaXplZCA/IGZhbHNlIDogdmFsdWU7XHJcbiAgfVxyXG5cclxuICBzd2lwZXI6IGFueTtcclxuXHJcbiAgcHJpdmF0ZSBzd2lwZXJXcmFwcGVyOiBhbnk7XHJcbiAgcHJpdmF0ZSBzbGlkZUNvdW50ID0gMDtcclxuICBwcml2YXRlIGluaXRpYWxpemVkID0gZmFsc2U7XHJcbiAgcHJpdmF0ZSBzaG91bGRJbml0aWFsaXplID0gdHJ1ZTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXHJcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZlxyXG4gICkge31cclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgaWYgKHRoaXMuc2hvdWxkSW5pdGlhbGl6ZSkge1xyXG4gICAgICB0aGlzLnNldHVwKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXR1cCgpIHtcclxuICAgIGlmICghdGhpcy5zd2lwZXIpIHtcclxuICAgICAgLy8gaWYgcmVuZGVyZWQgb24gc2VydmVyIHF1ZXJ5U2VsZWN0b3IgaXMgdW5kZWZpbmVkXHJcbiAgICAgIGlmICh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5zd2lwZXJXcmFwcGVyID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgICAgICcuc3dpcGVyLXdyYXBwZXInXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnNsaWRlQ291bnQgPSB0aGlzLnN3aXBlcldyYXBwZXIuY2hpbGRFbGVtZW50Q291bnQ7XHJcbiAgICAgICAgdGhpcy5zd2lwZXIgPSBuZXcgU3dpcGVyKFxyXG4gICAgICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3Rvcignc3dpcGVyID4gZGl2JyksXHJcbiAgICAgICAgICB0aGlzLmNvbmZpZ1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VEZXRlY3RvclJlZi5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuc2hvdWxkSW5pdGlhbGl6ZSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdBZnRlclZpZXdDaGVja2VkKCkge1xyXG4gICAgaWYgKHRoaXMuc2hvdWxkSW5pdGlhbGl6ZSkge1xyXG4gICAgICB0aGlzLnNldHVwKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICB0aGlzLnN3aXBlcldyYXBwZXIgJiZcclxuICAgICAgdGhpcy5zbGlkZUNvdW50ICE9PSB0aGlzLnN3aXBlcldyYXBwZXIuY2hpbGRFbGVtZW50Q291bnRcclxuICAgICkge1xyXG4gICAgICB0aGlzLnNsaWRlQ291bnQgPSB0aGlzLnN3aXBlcldyYXBwZXIuY2hpbGRFbGVtZW50Q291bnQ7XHJcbiAgICAgIHRoaXMuc3dpcGVyLnVwZGF0ZSgpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=