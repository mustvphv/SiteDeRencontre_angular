/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, Input } from '@angular/core';
import Swiper from 'swiper';
export class SwiperComponent {
    /**
     * @param {?} elementRef
     * @param {?} changeDetectorRef
     */
    constructor(elementRef, changeDetectorRef) {
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.slideCount = 0;
        this.initialized = false;
        this.shouldInitialize = true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set initialize(value) {
        this.shouldInitialize = this.initialized ? false : value;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.shouldInitialize) {
            this.setup();
        }
    }
    /**
     * @return {?}
     */
    setup() {
        if (!this.swiper) {
            // if rendered on server querySelector is undefined
            if (this.elementRef.nativeElement.querySelector) {
                this.swiperWrapper = this.elementRef.nativeElement.querySelector('.swiper-wrapper');
                this.slideCount = this.swiperWrapper.childElementCount;
                this.swiper = new Swiper(this.elementRef.nativeElement.querySelector('swiper > div'), this.config);
                this.changeDetectorRef.detectChanges();
            }
            this.shouldInitialize = false;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        if (this.shouldInitialize) {
            this.setup();
        }
        if (this.swiperWrapper &&
            this.slideCount !== this.swiperWrapper.childElementCount) {
            this.slideCount = this.swiperWrapper.childElementCount;
            this.swiper.update();
        }
    }
}
SwiperComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line: component-selector
                selector: 'swiper',
                template: "<div\r\n  [ngClass]=\"{\r\n    'swiper-container': config?.containerModifierClass === undefined\r\n  }\"\r\n>\r\n  <ng-content></ng-content>\r\n</div>\r\n",
                styles: [":host{display:block}.swiper-container{width:100%;height:100%}"]
            }] }
];
/** @nocollapse */
SwiperComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
SwiperComponent.propDecorators = {
    config: [{ type: Input }],
    initialize: [{ type: Input, args: ['initialize',] }]
};
if (false) {
    /** @type {?} */
    SwiperComponent.prototype.config;
    /** @type {?} */
    SwiperComponent.prototype.swiper;
    /**
     * @type {?}
     * @private
     */
    SwiperComponent.prototype.swiperWrapper;
    /**
     * @type {?}
     * @private
     */
    SwiperComponent.prototype.slideCount;
    /**
     * @type {?}
     * @private
     */
    SwiperComponent.prototype.initialized;
    /**
     * @type {?}
     * @private
     */
    SwiperComponent.prototype.shouldInitialize;
    /**
     * @type {?}
     * @private
     */
    SwiperComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    SwiperComponent.prototype.changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpcGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC11c2VmdWwtc3dpcGVyLyIsInNvdXJjZXMiOlsibGliL3N3aXBlci9zd2lwZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBR0wsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsS0FBSyxFQUNOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sTUFBeUIsTUFBTSxRQUFRLENBQUM7QUFRL0MsTUFBTSxPQUFPLGVBQWU7Ozs7O0lBYzFCLFlBQ1UsVUFBc0IsRUFDdEIsaUJBQW9DO1FBRHBDLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQU50QyxlQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsZ0JBQVcsR0FBRyxLQUFLLENBQUM7UUFDcEIscUJBQWdCLEdBQUcsSUFBSSxDQUFDO0lBSzdCLENBQUM7Ozs7O0lBZEosSUFBeUIsVUFBVSxDQUFDLEtBQWM7UUFDaEQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQzNELENBQUM7Ozs7SUFjRCxlQUFlO1FBQ2IsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDekIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2Q7SUFDSCxDQUFDOzs7O0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2hCLG1EQUFtRDtZQUNuRCxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGFBQWEsRUFBRTtnQkFDL0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQzlELGlCQUFpQixDQUNsQixDQUFDO2dCQUNGLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQztnQkFDdkQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FDdEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxFQUMzRCxJQUFJLENBQUMsTUFBTSxDQUNaLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxDQUFDO2FBQ3hDO1lBRUQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztTQUMvQjtJQUNILENBQUM7Ozs7SUFFRCxrQkFBa0I7UUFDaEIsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDekIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2Q7UUFFRCxJQUNFLElBQUksQ0FBQyxhQUFhO1lBQ2xCLElBQUksQ0FBQyxVQUFVLEtBQUssSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsRUFDeEQ7WUFDQSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUM7WUFDdkQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUN0QjtJQUNILENBQUM7OztZQTlERixTQUFTLFNBQUM7O2dCQUVULFFBQVEsRUFBRSxRQUFRO2dCQUNsQixzS0FBc0M7O2FBRXZDOzs7O1lBVkMsVUFBVTtZQUZWLGlCQUFpQjs7O3FCQWVoQixLQUFLO3lCQUNMLEtBQUssU0FBQyxZQUFZOzs7O0lBRG5CLGlDQUErQjs7SUFLL0IsaUNBQVk7Ozs7O0lBRVosd0NBQTJCOzs7OztJQUMzQixxQ0FBdUI7Ozs7O0lBQ3ZCLHNDQUE0Qjs7Ozs7SUFDNUIsMkNBQWdDOzs7OztJQUc5QixxQ0FBOEI7Ozs7O0lBQzlCLDRDQUE0QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQWZ0ZXJWaWV3Q2hlY2tlZCxcclxuICBBZnRlclZpZXdJbml0LFxyXG4gIENoYW5nZURldGVjdG9yUmVmLFxyXG4gIENvbXBvbmVudCxcclxuICBFbGVtZW50UmVmLFxyXG4gIElucHV0XHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCBTd2lwZXIsIHsgU3dpcGVyT3B0aW9ucyB9IGZyb20gJ3N3aXBlcic7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGNvbXBvbmVudC1zZWxlY3RvclxyXG4gIHNlbGVjdG9yOiAnc3dpcGVyJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vc3dpcGVyLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9zd2lwZXIuY29tcG9uZW50LmNzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTd2lwZXJDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdDaGVja2VkLCBBZnRlclZpZXdJbml0IHtcclxuICAvLyBhZGQgYWxsIHRoZSBvcHRpb25zIGFzIG9wdGlvbmFsIHNldHRpbmdzIGFuZCB1c2UgdGhlbSB0byBjcmVhdGUgYW4gb3B0aW9ucyBvYmplY3RcclxuICBASW5wdXQoKSBjb25maWc6IFN3aXBlck9wdGlvbnM7XHJcbiAgQElucHV0KCdpbml0aWFsaXplJykgc2V0IGluaXRpYWxpemUodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuc2hvdWxkSW5pdGlhbGl6ZSA9IHRoaXMuaW5pdGlhbGl6ZWQgPyBmYWxzZSA6IHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgc3dpcGVyOiBhbnk7XHJcblxyXG4gIHByaXZhdGUgc3dpcGVyV3JhcHBlcjogYW55O1xyXG4gIHByaXZhdGUgc2xpZGVDb3VudCA9IDA7XHJcbiAgcHJpdmF0ZSBpbml0aWFsaXplZCA9IGZhbHNlO1xyXG4gIHByaXZhdGUgc2hvdWxkSW5pdGlhbGl6ZSA9IHRydWU7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxyXG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWZcclxuICApIHt9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIGlmICh0aGlzLnNob3VsZEluaXRpYWxpemUpIHtcclxuICAgICAgdGhpcy5zZXR1cCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0dXAoKSB7XHJcbiAgICBpZiAoIXRoaXMuc3dpcGVyKSB7XHJcbiAgICAgIC8vIGlmIHJlbmRlcmVkIG9uIHNlcnZlciBxdWVyeVNlbGVjdG9yIGlzIHVuZGVmaW5lZFxyXG4gICAgICBpZiAodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3Rvcikge1xyXG4gICAgICAgIHRoaXMuc3dpcGVyV3JhcHBlciA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgICAgICAnLnN3aXBlci13cmFwcGVyJ1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5zbGlkZUNvdW50ID0gdGhpcy5zd2lwZXJXcmFwcGVyLmNoaWxkRWxlbWVudENvdW50O1xyXG4gICAgICAgIHRoaXMuc3dpcGVyID0gbmV3IFN3aXBlcihcclxuICAgICAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3N3aXBlciA+IGRpdicpLFxyXG4gICAgICAgICAgdGhpcy5jb25maWdcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnNob3VsZEluaXRpYWxpemUgPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpIHtcclxuICAgIGlmICh0aGlzLnNob3VsZEluaXRpYWxpemUpIHtcclxuICAgICAgdGhpcy5zZXR1cCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChcclxuICAgICAgdGhpcy5zd2lwZXJXcmFwcGVyICYmXHJcbiAgICAgIHRoaXMuc2xpZGVDb3VudCAhPT0gdGhpcy5zd2lwZXJXcmFwcGVyLmNoaWxkRWxlbWVudENvdW50XHJcbiAgICApIHtcclxuICAgICAgdGhpcy5zbGlkZUNvdW50ID0gdGhpcy5zd2lwZXJXcmFwcGVyLmNoaWxkRWxlbWVudENvdW50O1xyXG4gICAgICB0aGlzLnN3aXBlci51cGRhdGUoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19